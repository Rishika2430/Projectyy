import tkinter as tk
from tkinter import simpledialog, messagebox, filedialog
import random
import time

class SmartDeskApp:
    def __init__(self, root):
        self.root = root
        self.root.title("SmartDesk: Your Digital Study Buddy üìö")
        self.root.geometry("600x500")
        self.root.resizable(False, False)

        self.tasks = []
        self.completed = 0

        # ‚úÖ Background image (simple Tkinter PhotoImage, replace 'bg.png' with your image)
        try:
            self.bg_image = tk.PhotoImage(file="bg.png")  
            self.bg_label = tk.Label(root, image=self.bg_image)
            self.bg_label.place(relwidth=1, relheight=1)
        except:
            self.root.config(bg="#f4f4f4")

        # Title
        tk.Label(root, text="SmartDesk üìö", font=("Arial", 22, "bold"), bg="#f4f4f4").pack(pady=10)

        # Task List
        self.task_listbox = tk.Listbox(root, width=50, height=8, font=("Arial", 12))
        self.task_listbox.pack(pady=10)

        # Buttons
        button_frame = tk.Frame(root, bg="#f4f4f4")
        button_frame.pack()

        tk.Button(button_frame, text="‚ûï Add Task", command=self.add_task, width=15).grid(row=0, column=0, padx=5)
        tk.Button(button_frame, text="‚úÖ Mark Done", command=self.mark_done, width=15).grid(row=0, column=1, padx=5)
        tk.Button(button_frame, text="üìù Notes", command=self.open_notes, width=15).grid(row=0, column=2, padx=5)

        # Progress Label
        self.progress_label = tk.Label(root, text="Progress: 0%", font=("Arial", 12), bg="#f4f4f4")
        self.progress_label.pack(pady=10)

        # Study Timer
        self.timer_label = tk.Label(root, text="Timer: 00:00", font=("Arial", 14), fg="blue", bg="#f4f4f4")
        self.timer_label.pack(pady=5)
        tk.Button(root, text="‚ñ∂ Start 1 min Focus", command=self.start_timer).pack(pady=5)

    def add_task(self):
        task = simpledialog.askstring("Add Task", "Enter your task:")
        if task:
            self.tasks.append(task)
            self.task_listbox.insert(tk.END, task)

    def mark_done(self):
        selection = self.task_listbox.curselection()
        if not selection:
            messagebox.showwarning("No Selection", "Please select a task to mark as done!")
            return
        index = selection[0]
        task = self.task_listbox.get(index)

        self.task_listbox.delete(index)
        self.tasks.remove(task)
        self.completed += 1

        # Update progress
        total = self.completed + len(self.tasks)
        progress = int((self.completed / total) * 100) if total > 0 else 100
        self.progress_label.config(text=f"Progress: {progress}%")

        # Motivational quotes
        quotes = [
            "Keep going, you're doing amazing! üåü",
            "One step at a time üöÄ",
            "Small progress is still progress üí™",
            "Believe in yourself ‚ú®",
            "Great job! Now aim higher üî•"
        ]
        messagebox.showinfo("Task Done ‚úÖ", f"Good job! You completed: {task}\n\nüí° {random.choice(quotes)}")

    def open_notes(self):
        notes_window = tk.Toplevel(self.root)
        notes_window.title("üìù Notes")
        notes_window.geometry("400x300")

        text_area = tk.Text(notes_window, font=("Arial", 12))
        text_area.pack(expand=True, fill="both")

        def save_notes():
            file = filedialog.asksaveasfilename(defaultextension=".txt",
                                                filetypes=[("Text Files", "*.txt")])
            if file:
                with open(file, "w") as f:
                    f.write(text_area.get("1.0", tk.END))
                messagebox.showinfo("Saved", "Notes saved successfully!")

        tk.Button(notes_window, text="üíæ Save Notes", command=save_notes).pack(pady=5)

    def start_timer(self):
        self.time_left = 60  # 1 minute
        self.update_timer()

    def update_timer(self):
        mins, secs = divmod(self.time_left, 60)
        self.timer_label.config(text=f"Timer: {mins:02}:{secs:02}")
        if self.time_left > 0:
            self.time_left -= 1
            self.root.after(1000, self.update_timer)
        else:
            messagebox.showinfo("Time's up!", "‚è∞ Great focus session! Take a short break ‚òï")

# ---------------- Run App ----------------
if __name__ == "__main__":
    root = tk.Tk()
    app = SmartDeskApp(root)
    root.mainloop()
